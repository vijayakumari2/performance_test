{
	"info": {
		"_postman_id": "2af3ab04-a712-44f2-9c33-8d77c55b283c",
		"name": "Memcrypt_qa Performance",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38607775",
		"_collection_link": "https://cloudy-shuttle-102798.postman.co/workspace/Memcrypt~47539f18-1a06-47e3-955b-877ae9ecc9a2/collection/38607775-2af3ab04-a712-44f2-9c33-8d77c55b283c?action=share&source=collection_link&creator=38607775"
	},
	"item": [
		{
			"name": "Admin Flow",
			"item": [
				{
					"name": "Create Users",
					"item": [
						{
							"name": "Create User with valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the status code is 201",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'pending'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"pending\");",
											"});",
											"",
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Extract the id and email from the response",
											"var responsetenantId = jsonData.tenant.id;",
											"var responseadminuserid = jsonData.adminUser.id;",
											"var responseadminusername = jsonData.adminUser.username;",
											"var responseadminemail = jsonData.adminUser.email;",
											"var responseadminfirstname = jsonData.adminUser.firstName;",
											"var responseadminlastname = jsonData.adminUser.lastName;",
											"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
											"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
											"",
											"// Set the id and email as environment variables",
											"pm.environment.set(\"TenantId\", responsetenantId);",
											"pm.environment.set(\"AdminUserId\", responseadminuserid);",
											"pm.environment.set(\"user_username\", responseadminusername);",
											"pm.environment.set(\"Existingusername\", responseadminusername);",
											"pm.environment.set(\"Existingemail\", responseadminemail);",
											"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
											"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
											"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
											"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of specified length",
											"function generateRandomString(length) {",
											"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    let result = '';",
											"    for (let i = 0; i < length; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
											"    }",
											"    return result;",
											"}",
											"",
											"// Function to remove commas and spaces from a string",
											"function sanitizeString(str) {",
											"    return str.replace(/[\\s,]/g, ''); // Remove spaces and commas",
											"}",
											"",
											"// Generate custom organization name and ensure it’s <= 55 characters",
											"let customOrgName = generateRandomString(3) + ",
											"                    pm.variables.replaceIn('{{$randomCompanyName}}').substring(0, 10) + // Restrict to 10 characters",
											"                    generateRandomString(8) + ",
											"                    pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                    generateRandomString(3);",
											"",
											"// Sanitize the customOrgName to remove commas and spaces",
											"customOrgName = sanitizeString(customOrgName);",
											"",
											"if (customOrgName.length > 55) {",
											"    customOrgName = customOrgName.substring(0, 55);",
											"}",
											"",
											"pm.environment.set(\"customOrgName\", customOrgName);// Store customOrgName in environment variable",
											"",
											"// Generate custom email with \"com\" included, ensuring it’s <= 75 characters",
											"let customEmail = generateRandomString(3) + ",
											"                  pm.variables.replaceIn('{{$randomFirstName}}').substring(0, 10) + // Restrict to 10 characters",
											"                  generateRandomString(5) + ",
											"                  pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                  generateRandomString(5) + ",
											"                  'com';",
											"",
											"// Calculate remaining length to ensure total length is 75 characters",
											"const remainingLength = 75 - customEmail.length;",
											"",
											"// Append a part of {{$randomEmail}} to reach the exact length",
											"if (remainingLength > 0) {",
											"    customEmail += pm.variables.replaceIn('{{$randomEmail}}').substring(0, remainingLength);",
											"}",
											"",
											"// Generate custom username and ensure it’s not too long",
											"const customUsername = generateRandomString(5) + ",
											"                       pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                       generateRandomString(5) + ",
											"                       pm.variables.replaceIn('{{$randomFirstName}}').substring(0, 10) + // Restrict to 10 characters",
											"                       generateRandomString(3);",
											"",
											"if (customUsername.length > 75) { // You can adjust this limit based on your requirements",
											"    customUsername = customUsername.substring(0, 75);",
											"}",
											"",
											"// Set the generated values into Postman environment variables",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"pm.environment.set(\"customUsername\", customUsername);",
											"pm.environment.set(\"customEmail\", customEmail);",
											"",
											"// Log the generated values to the console",
											"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
											"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
											"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Admin Email Verification for Signup",
					"item": [
						{
							"name": "Fetch Id from Latest  email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response body as JSON",
											"let responseData = pm.response.json();",
											"",
											"// Check if responseData is an array and has at least one object",
											"if (Array.isArray(responseData) && responseData.length > 0) {",
											"    // Access the first object in the array and get its 'id'",
											"    let latestEmailResponseId = responseData[0].id;",
											"",
											"    // Store the 'id' in an environment variable",
											"    pm.environment.set(\"latestEmailResponseId\", latestEmailResponseId);",
											"",
											"    // Log the ID to the console (optional)",
											"    console.log(\"First Email ID:\", latestEmailResponseId);",
											"} else {",
											"    // Handle the case where responseData is empty or not an array",
											"    console.log(\"No email responses found in the response data.\");",
											"    pm.environment.unset(\"latestEmailResponseId\"); // Optionally clear the variable if there's no valid ID",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Adding a delay of 3 seconds before sending the request...\");",
											"",
											"// Delay of 1.5 seconds (3000 milliseconds)",
											"setTimeout(function() {",
											"    console.log(\"Delay finished. Proceeding to send the request.\");",
											"    // Any code you want to execute after the delay can go here",
											"}, 1500);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{emailURL}}/api/Messages/new?mailboxName={{mailboxName}}&pageSize=5",
									"host": [
										"{{emailURL}}"
									],
									"path": [
										"api",
										"Messages",
										"new"
									],
									"query": [
										{
											"key": "lastSeenMessageId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "mailboxName",
											"value": "{{mailboxName}}"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Admin Email for Signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fetch customOrgName from environment",
											"let customOrgName = pm.environment.get(\"customOrgName\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// Check that the body includes the dynamic customOrgName",
											"pm.test(`New User Registration for ${customOrgName}`, function () {",
											"  pm.expect(pm.response.text()).to.include(`New User Registration for ${customOrgName}`);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{emailURL}}/api/Messages/{{latestEmailResponseId}}",
									"host": [
										"{{emailURL}}"
									],
									"path": [
										"api",
										"Messages",
										"{{latestEmailResponseId}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Fetch pending users",
					"item": [
						{
							"name": "Fetch all users pending for approval",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Check that the status code is 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Retrieve environment variables",
											"const adminUserId = pm.environment.get(\"AdminUserId\");",
											"",
											"// Check that the body includes the string from the environment variable",
											"pm.test(\"Body matches string\", function () {",
											"    // Use the retrieved environment variable in the test",
											"    pm.expect(pm.response.text()).to.include(adminUserId);",
											"});",
											"",
											"pm.test(\"Body matches string 'pending'\", function () {",
											"    // Use the retrieved environment variable in the test",
											"    pm.expect(pm.response.text()).to.include(\"pending\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/pending",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"pending"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Approve Users",
					"item": [
						{
							"name": "Approve Created User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'User approved successfully'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"User approved successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User Email Verification After Approval",
					"item": [
						{
							"name": "Verify User Email After Approval",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fetch customOrgName from environment",
											"let customOrgName = pm.environment.get(\"customOrgName\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// Check that the body includes the dynamic customOrgName",
											"pm.test(`Your account has been approved`, function () {",
											"  pm.expect(pm.response.text()).to.include(`Your account has been approved`);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Adding a delay of 3 seconds before sending the request...\");",
											"",
											"// Delay of 3 seconds (3000 milliseconds)",
											"setTimeout(function() {",
											"    console.log(\"Delay finished. Proceeding to send the request.\");",
											"    // Any code you want to execute after the delay can go here",
											"}, 2500);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{emailURL}}/api/Messages?searchTerms={{Existingemail}}&mailboxName=Default&sortIsDescending=true&page=1&pageSize=5",
									"host": [
										"{{emailURL}}"
									],
									"path": [
										"api",
										"Messages"
									],
									"query": [
										{
											"key": "searchTerms",
											"value": "{{Existingemail}}"
										},
										{
											"key": "mailboxName",
											"value": "Default"
										},
										{
											"key": "sortColumn",
											"value": "receivedDate",
											"disabled": true
										},
										{
											"key": "sortIsDescending",
											"value": "true"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Fetch All Users",
					"item": [
						{
							"name": "Fetch all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the status code is 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Retrieve environment variables",
											"const adminUserId = pm.environment.get(\"AdminUserId\");",
											"",
											"// Check that the body includes the string from the environment variable",
											"pm.test(\"Body matches string\", function () {",
											"    // Use the retrieved environment variable in the test",
											"    pm.expect(pm.response.text()).to.include(adminUserId);",
											"});",
											"",
											"pm.test(\"Body matches string 'approved'\", function () {",
											"    // Use the retrieved environment variable in the test",
											"    pm.expect(pm.response.text()).to.include(\"approved\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Verify email",
					"item": [
						{
							"name": "Verifying users email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'Email verified successfully'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Email verified successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{Existingverificationcode}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/verify-email",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"verify-email"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Delete User and Organization after approval",
					"item": [
						{
							"name": "Delete User After Approval",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"users",
										"{{AdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Org after Approval",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"organizations",
										"{{TenantId}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Store the base URL from the environment variable",
									"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
									"let clientid = pm.environment.get(\"client_id\");",
									"",
									"// Set the base URL, realm, client ID, and client secret",
									" // Replace {keycloak_url} with your Keycloak URL",
									"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
									"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
									"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
									"",
									"// Set the token endpoint",
									"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
									"",
									"// Make the request to get the access token using client credentials",
									"pm.sendRequest({",
									"    url: tokenEndpoint,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded: [",
									"            { key: 'client_id', value: keycloakclientId },",
									"            { key: 'client_secret', value: keycloakclientSecret },",
									"            { key: 'grant_type', value: 'client_credentials' }",
									"        ]",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Failed to get access token:', err);",
									"    } else {",
									"        let jsonData = res.json();",
									"        ",
									"        if (jsonData.access_token) {",
									"            // Store the access token in an environment variable",
									"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
									"            console.log('Access token:', jsonData.access_token);",
									"        } else {",
									"            console.log('Error retrieving access token:', jsonData);",
									"        }",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Reject users",
					"item": [
						{
							"name": "Create User for rejecting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the status code is 201",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'pending'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"pending\");",
											"});",
											"",
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Extract the id and email from the response",
											"var responsetenantId = jsonData.tenant.id;",
											"var responseadminuserid = jsonData.adminUser.id;",
											"var responseadminusername = jsonData.adminUser.username;",
											"var responseadminemail = jsonData.adminUser.email;",
											"var responseadminfirstname = jsonData.adminUser.firstName;",
											"var responseadminlastname = jsonData.adminUser.lastName;",
											"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
											"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
											"",
											"// Set the id and email as environment variables",
											"pm.environment.set(\"TenantId\", responsetenantId);",
											"pm.environment.set(\"AdminUserId\", responseadminuserid);",
											"pm.environment.set(\"Existingusername\", responseadminusername);",
											"pm.environment.set(\"Existingemail\", responseadminemail);",
											"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
											"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
											"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
											"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of specified length",
											"function generateRandomString(length) {",
											"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    let result = '';",
											"    for (let i = 0; i < length; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
											"    }",
											"    return result;",
											"}",
											"",
											"// Function to remove commas and spaces from a string",
											"function sanitizeString(str) {",
											"    return str.replace(/[\\s,]/g, ''); // Remove spaces and commas",
											"}",
											"",
											"// Generate custom organization name and ensure it’s <= 55 characters",
											"let customOrgName = generateRandomString(3) + ",
											"                    pm.variables.replaceIn('{{$randomCompanyName}}').substring(0, 10) + // Restrict to 10 characters",
											"                    generateRandomString(8) + ",
											"                    pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                    generateRandomString(3);",
											"",
											"// Sanitize the customOrgName to remove commas and spaces",
											"customOrgName = sanitizeString(customOrgName);",
											"",
											"if (customOrgName.length > 55) {",
											"    customOrgName = customOrgName.substring(0, 55);",
											"}",
											"",
											"pm.environment.set(\"customOrgName\", customOrgName);// Store customOrgName in environment variable",
											"",
											"// Generate custom email with \"com\" included, ensuring it’s <= 75 characters",
											"let customEmail = generateRandomString(3) + ",
											"                  pm.variables.replaceIn('{{$randomFirstName}}').substring(0, 10) + // Restrict to 10 characters",
											"                  generateRandomString(5) + ",
											"                  pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                  generateRandomString(5) + ",
											"                  'com';",
											"",
											"// Calculate remaining length to ensure total length is 75 characters",
											"const remainingLength = 75 - customEmail.length;",
											"",
											"// Append a part of {{$randomEmail}} to reach the exact length",
											"if (remainingLength > 0) {",
											"    customEmail += pm.variables.replaceIn('{{$randomEmail}}').substring(0, remainingLength);",
											"}",
											"",
											"// Generate custom username and ensure it’s not too long",
											"const customUsername = generateRandomString(5) + ",
											"                       pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                       generateRandomString(5) + ",
											"                       pm.variables.replaceIn('{{$randomFirstName}}').substring(0, 10) + // Restrict to 10 characters",
											"                       generateRandomString(3);",
											"",
											"if (customUsername.length > 75) { // You can adjust this limit based on your requirements",
											"    customUsername = customUsername.substring(0, 75);",
											"}",
											"",
											"// Set the generated values into Postman environment variables",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"pm.environment.set(\"customUsername\", customUsername);",
											"pm.environment.set(\"customEmail\", customEmail);",
											"",
											"// Log the generated values to the console",
											"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
											"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
											"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User Email Verification After Rejection",
					"item": [
						{
							"name": "Verify User Email after Rejection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fetch customOrgName from environment",
											"let customOrgName = pm.environment.get(\"customOrgName\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// Check that the body includes the dynamic customOrgName",
											"pm.test(`Your Account Application Status`, function () {",
											"  pm.expect(pm.response.text()).to.include(`Your account application status`);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Adding a delay of 3 seconds before sending the request...\");",
											"",
											"// Delay of 1.5 seconds (3000 milliseconds)",
											"setTimeout(function() {",
											"    console.log(\"Delay finished. Proceeding to send the request.\");",
											"    // Any code you want to execute after the delay can go here",
											"}, 1500);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{emailURL}}/api/Messages?searchTerms={{Existingemail}}&mailboxName=Default&sortIsDescending=true&page=1&pageSize=5",
									"host": [
										"{{emailURL}}"
									],
									"path": [
										"api",
										"Messages"
									],
									"query": [
										{
											"key": "searchTerms",
											"value": "{{Existingemail}}"
										},
										{
											"key": "mailboxName",
											"value": "Default"
										},
										{
											"key": "sortColumn",
											"value": "receivedDate",
											"disabled": true
										},
										{
											"key": "sortIsDescending",
											"value": "true"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Delete User and Organization after Rejection",
					"item": [
						{
							"name": "Delete User After Rejection",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"users",
										"{{AdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Org after Rejection",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"organizations",
										"{{TenantId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Store the base URL from the environment variable",
									"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
									"let clientid = pm.environment.get(\"client_id\");",
									"",
									"// Set the base URL, realm, client ID, and client secret",
									" // Replace {keycloak_url} with your Keycloak URL",
									"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
									"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
									"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
									"",
									"// Set the token endpoint",
									"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
									"",
									"// Make the request to get the access token using client credentials",
									"pm.sendRequest({",
									"    url: tokenEndpoint,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded: [",
									"            { key: 'client_id', value: keycloakclientId },",
									"            { key: 'client_secret', value: keycloakclientSecret },",
									"            { key: 'grant_type', value: 'client_credentials' }",
									"        ]",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Failed to get access token:', err);",
									"    } else {",
									"        let jsonData = res.json();",
									"        ",
									"        if (jsonData.access_token) {",
									"            // Store the access token in an environment variable",
									"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
									"            console.log('Access token:', jsonData.access_token);",
									"        } else {",
									"            console.log('Error retrieving access token:', jsonData);",
									"        }",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Agent Binary",
					"item": [
						{
							"name": "Upload File",
							"item": [
								{
									"name": "File  Upload with valid  .zip  extension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													" var responseBody = pm.response.json();\r",
													" var filename = responseBody.filename;\r",
													"\r",
													"pm.environment.set(\"zipfile\",filename)\r",
													"pm.test(\"Response filename contains only .zip extension\", function() {\r",
													"    pm.expect(filename).to.match(/\\.zip$/);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'uploaded successfully'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"uploaded successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get the folder path from the environment variable\r",
													"const folderPath = pm.environment.get('fileuploadPath');\r",
													"\r",
													"// Set the file name directly\r",
													"const fileName = \"4mb.zip\";\r",
													"\r",
													"// Use backticks for template literals to combine folder path and file name\r",
													"const filePath = `${folderPath}/${fileName}`;\r",
													"console.log(\"File path:\", filePath);\r",
													"\r",
													"// Set the request body to include the file\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata: [\r",
													"        {\r",
													"            key: 'file',\r",
													"            type: 'file',\r",
													"            src: filePath,  // Use the combined file path\r",
													"        },\r",
													"    ],\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "(Required)",
													"type": "file",
													"src": [],
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "File  Upload with valid  .tar extension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													" var responseBody = pm.response.json();\r",
													" var filename = responseBody.filename;\r",
													"\r",
													"pm.environment.set(\"tarfile\",filename)\r",
													"\r",
													"pm.test(\"Response filename contains only .tar extension\", function() {\r",
													"    pm.expect(filename).to.match(/\\.tar$/);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'uploaded successfully'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"uploaded successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get the folder path from the environment variable\r",
													"const folderPath = pm.environment.get('fileuploadPath');\r",
													"\r",
													"// Set the file name directly\r",
													"const fileName = \"sample-1.tar\";\r",
													"\r",
													"// Use backticks for template literals to combine folder path and file name\r",
													"const filePath = `${folderPath}/${fileName}`;\r",
													"console.log(\"File path:\", filePath);\r",
													"\r",
													"// Set the request body to include the file\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata: [\r",
													"        {\r",
													"            key: 'file',\r",
													"            type: 'file',\r",
													"            src: filePath,  // Use the combined file path\r",
													"        },\r",
													"    ],\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "(Required)",
													"type": "file",
													"src": [],
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "File Upload  with valid  .exe extension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													" var responseBody = pm.response.json();\r",
													" var filename = responseBody.filename;\r",
													"\r",
													"pm.environment.set(\"exefile\",filename);\r",
													"\r",
													"pm.test(\"Response filename contains only .exe extension\", function() {\r",
													"    pm.expect(filename).to.match(/\\.exe$/);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string 'uploaded successfully'\", function () {\r",
													"  pm.expect(pm.response.text()).to.include(\"uploaded successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"// Get the folder path from the environment variable\r",
													"const folderPath = pm.environment.get('fileuploadPath');\r",
													"\r",
													"// Set the file name directly\r",
													"const fileName = \"jq-win64.exe\";\r",
													"\r",
													"// Use backticks for template literals to combine folder path and file name\r",
													"const filePath = `${folderPath}/${fileName}`;\r",
													"console.log(\"File path:\", filePath);\r",
													"\r",
													"// Set the request body to include the file\r",
													"pm.request.body = {\r",
													"    mode: 'formdata',\r",
													"    formdata: [\r",
													"        {\r",
													"            key: 'file',\r",
													"            type: 'file',\r",
													"            src: filePath,  // Use the combined file path\r",
													"        },\r",
													"    ],\r",
													"};\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "(Required)",
													"type": "file",
													"src": [],
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Fetch Agentbinaries",
							"item": [
								{
									"name": "Fetch All Agentbinaries",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"let fileNames= [];\r",
													"for (let version in jsonData.versions) {\r",
													"    if (jsonData.versions.hasOwnProperty(version)) {\r",
													"        // Loop through each file in the version\r",
													"        jsonData.versions[version].forEach(file => {\r",
													"            // Push the filename into the array\r",
													"            fileNames.push(file.filename);\r",
													"        });\r",
													"    }\r",
													"}\r",
													"pm.environment.set(\"fileNames\", JSON.stringify(fileNames));\r",
													"\r",
													"console.log(fileNames);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										},
										"description": "List all available agent binary versions and their files."
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Download File",
							"item": [
								{
									"name": "Downloading a .zip File",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{zipfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{zipfile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Downloading a .tar file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{tarfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{tarfile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Downloading a .exe file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{exefile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{exefile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Files",
							"item": [
								{
									"name": "Deleting a .zip file.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204 No content\", function () {\r",
													"  pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/{{zipfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"{{zipfile}}"
											]
										},
										"description": "Delete the specified agent binary file. Only accessible by admin users."
									},
									"response": []
								},
								{
									"name": "Downloading a file that has been deleted.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"  pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{zipfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{zipfile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "useBrowser",
						"value": false,
						"type": "boolean"
					},
					{
						"key": "accessTokenUrl",
						"value": "{{keycloak_url}}/realms/memcrypt-qa/protocol/openid-connect/token",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "{{keycloak_url}}/realms/memcrypt-qa/protocol/openid-connect/auth",
						"type": "string"
					},
					{
						"key": "scope",
						"value": "openid email profile",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "{{client_id}}",
						"type": "string"
					},
					{
						"key": "redirect_uri",
						"value": "https://oauth.pstmn.io/v1/callback",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "Admin token",
						"type": "string"
					},
					{
						"key": "refreshRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "tokenRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "authRequestParams",
						"value": [],
						"type": "any"
					},
					{
						"key": "challengeAlgorithm",
						"value": "S256",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "authorization_code_with_pkce",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Store the base URL from the environment variable",
							"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
							"let clientid = pm.environment.get(\"client_id\");",
							"",
							"// Set the base URL, realm, client ID, and client secret",
							" // Replace {keycloak_url} with your Keycloak URL",
							"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
							"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
							"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
							"",
							"// Set the token endpoint",
							"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
							"",
							"// Get the current time and the token expiration time from environment variables",
							"let currentTime = Math.floor(Date.now() / 1000);",
							"let tokenExpiration = pm.environment.get(\"admin_token_expiration\");",
							"",
							"// Check if the token has expired or is about to expire",
							"if (currentTime >= tokenExpiration - 60) {",
							"    console.log(\"Access token is expired or about to expire for admin, refreshing the token...\");",
							"",
							"    // Attempt to refresh the token",
							"    pm.sendRequest({",
							"        url: tokenEndpoint,",
							"        method: \"POST\",",
							"        header: {",
							"            \"Content-Type\": \"application/x-www-form-urlencoded\"",
							"        },",
							"        body: {",
							"            mode: \"urlencoded\",",
							"            urlencoded: [",
							"                { key: \"client_id\", value: clientid },",
							"                { key: \"grant_type\", value: \"refresh_token\" },",
							"                { key: \"refresh_token\", value: pm.environment.get(\"admin_refresh_token\") }",
							"            ]",
							"        }",
							"    }, function (err, res) {",
							"        if (err) {",
							"            console.log(\"Token refresh failed for admin:\", err);",
							"        } else {",
							"            try {",
							"                let jsonData = res.json();",
							"",
							"                // Check if there is an invalid grant error",
							"                if (jsonData.error === \"invalid_grant\" || jsonData.error === \"invalid_client\") {",
							"            console.log(\"Invalid grant or client. Please re-authenticate to get a new access token and refresh token.\");",
							"               ",
							"                    // Handle the invalid grant error by re-authenticating",
							"                    pm.sendRequest({",
							"                        url: tokenEndpoint,",
							"                        method: \"POST\",",
							"                        header: {",
							"                            \"Content-Type\": \"application/x-www-form-urlencoded\"",
							"                        },",
							"                        body: {",
							"                            mode: \"urlencoded\",",
							"                            urlencoded: [",
							"                                { key: \"client_id\", value: clientid },",
							"                                { key: \"grant_type\", value: \"password\" },",
							"                                { key: \"username\", value: pm.environment.get(\"admin_username\") }, // Store securely in environment",
							"                                { key: \"password\", value: pm.environment.get(\"admin_password\") }, // Store securely in environment",
							"                                { key: \"scope\", value: \"openid\" }",
							"                            ]",
							"                        }",
							"                    }, function (authErr, authRes) {",
							"                        if (authErr) {",
							"                            console.log(\"Re-authentication failed for admin:\", authErr);",
							"                        } else {",
							"                            let authData = authRes.json();",
							"",
							"                            // Update the access token, refresh token, and expiration time",
							"                            pm.environment.set(\"admin_access_token\", authData.access_token);",
							"                            pm.environment.set(\"admin_refresh_token\", authData.refresh_token);",
							"",
							"                            // Calculate and store the new token expiration time",
							"                            let newExpirationTime = Math.floor(Date.now() / 1000) + authData.expires_in;",
							"                            pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
							"",
							"                            console.log(\"Re-authentication successful, new token acquired for admin.\");",
							"                        }",
							"                    });",
							"                } else {",
							"                    // Update the access token, refresh token, and expiration time",
							"                    pm.environment.set(\"admin_access_token\", jsonData.access_token);",
							"                    pm.environment.set(\"admin_refresh_token\", jsonData.refresh_token);",
							"",
							"                    // Calculate and store the new token expiration time",
							"                    let newExpirationTime = Math.floor(Date.now() / 1000) + jsonData.expires_in;",
							"                    pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
							"",
							"                    console.log(\"Admin Token refreshed successfully.\");",
							"                }",
							"            } catch (e) {",
							"                console.log(\"Error parsing response for admin:\", e);",
							"            }",
							"        }",
							"    });",
							"} else {",
							"    console.log(\"Access token is still valid for admin, no need to refresh.\");",
							"}",
							"",
							"//keycloak",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User Flow",
			"item": [
				{
					"name": "Create Users",
					"item": [
						{
							"name": "Create User with valid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the status code is 201",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'pending'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"pending\");",
											"});",
											"",
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Extract the id and email from the response",
											"var responsetenantId = jsonData.tenant.id;",
											"var responseadminuserid = jsonData.adminUser.id;",
											"var responseadminusername = jsonData.adminUser.username;",
											"var responseadminemail = jsonData.adminUser.email;",
											"var responseadminfirstname = jsonData.adminUser.firstName;",
											"var responseadminlastname = jsonData.adminUser.lastName;",
											"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
											"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
											"",
											"// Set the id and email as environment variables",
											"pm.environment.set(\"TenantId\", responsetenantId);",
											"pm.environment.set(\"AdminUserId\", responseadminuserid);",
											"pm.environment.set(\"user_username\", responseadminusername);",
											"pm.environment.set(\"Existingusername\", responseadminusername);",
											"pm.environment.set(\"Existingemail\", responseadminemail);",
											"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
											"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
											"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
											"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of specified length",
											"function generateRandomString(length) {",
											"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    let result = '';",
											"    for (let i = 0; i < length; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
											"    }",
											"    return result;",
											"}",
											"",
											"// Function to remove commas and spaces from a string",
											"function sanitizeString(str) {",
											"    return str.replace(/[\\s,]/g, ''); // Remove spaces and commas",
											"}",
											"",
											"// Generate custom organization name and ensure it’s <= 55 characters",
											"let customOrgName = generateRandomString(3) + ",
											"                    pm.variables.replaceIn('{{$randomCompanyName}}').substring(0, 10) + // Restrict to 10 characters",
											"                    generateRandomString(8) + ",
											"                    pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                    generateRandomString(3);",
											"",
											"// Sanitize the customOrgName to remove commas and spaces",
											"customOrgName = sanitizeString(customOrgName);",
											"",
											"if (customOrgName.length > 55) {",
											"    customOrgName = customOrgName.substring(0, 55);",
											"}",
											"",
											"pm.environment.set(\"customOrgName\", customOrgName);// Store customOrgName in environment variable",
											"",
											"// Generate custom email with \"com\" included, ensuring it’s <= 75 characters",
											"let customEmail = generateRandomString(3) + ",
											"                  pm.variables.replaceIn('{{$randomFirstName}}').substring(0, 10) + // Restrict to 10 characters",
											"                  generateRandomString(5) + ",
											"                  pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                  generateRandomString(5) + ",
											"                  'com';",
											"",
											"// Calculate remaining length to ensure total length is 75 characters",
											"const remainingLength = 75 - customEmail.length;",
											"",
											"// Append a part of {{$randomEmail}} to reach the exact length",
											"if (remainingLength > 0) {",
											"    customEmail += pm.variables.replaceIn('{{$randomEmail}}').substring(0, remainingLength);",
											"}",
											"",
											"// Generate custom username and ensure it’s not too long",
											"const customUsername = generateRandomString(5) + ",
											"                       pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                       generateRandomString(5) + ",
											"                       pm.variables.replaceIn('{{$randomFirstName}}').substring(0, 10) + // Restrict to 10 characters",
											"                       generateRandomString(3);",
											"",
											"if (customUsername.length > 75) { // You can adjust this limit based on your requirements",
											"    customUsername = customUsername.substring(0, 75);",
											"}",
											"",
											"// Set the generated values into Postman environment variables",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"pm.environment.set(\"customUsername\", customUsername);",
											"pm.environment.set(\"customEmail\", customEmail);",
											"",
											"// Log the generated values to the console",
											"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
											"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
											"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User Email Verification for Signup",
					"item": [
						{
							"name": "Verify User Email for Signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fetch customOrgName from environment",
											"let customOrgName = pm.environment.get(\"customOrgName\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// Check that the body includes the dynamic customOrgName",
											"pm.test(`Verify Your Email for ${customOrgName}`, function () {",
											"  pm.expect(pm.response.text()).to.include(`Verify Your Email for ${customOrgName}`);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Adding a delay of 3 seconds before sending the request...\");",
											"",
											"// Delay of 3 seconds (3000 milliseconds)",
											"setTimeout(function() {",
											"    console.log(\"Delay finished. Proceeding to send the request.\");",
											"    // Any code you want to execute after the delay can go here",
											"}, 1500);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{emailURL}}/api/Messages?searchTerms={{Existingemail}}&mailboxName=Default&sortIsDescending=true&page=1&pageSize=5",
									"host": [
										"{{emailURL}}"
									],
									"path": [
										"api",
										"Messages"
									],
									"query": [
										{
											"key": "searchTerms",
											"value": "{{Existingemail}}"
										},
										{
											"key": "mailboxName",
											"value": "Default"
										},
										{
											"key": "sortColumn",
											"value": "receivedDate",
											"disabled": true
										},
										{
											"key": "sortIsDescending",
											"value": "true"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Approve user in User Flow",
					"item": [
						{
							"name": "Approve Created User in User Flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'User approved successfully'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"User approved successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Store the base URL from the environment variable",
									"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
									"let clientid = pm.environment.get(\"client_id\");",
									"",
									"// Set the base URL, realm, client ID, and client secret",
									" // Replace {keycloak_url} with your Keycloak URL",
									"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
									"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
									"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
									"",
									"// Set the token endpoint",
									"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
									"",
									"// Get the current time and the token expiration time from environment variables",
									"let currentTime = Math.floor(Date.now() / 1000);",
									"let tokenExpiration = pm.environment.get(\"admin_token_expiration\");",
									"",
									"// Check if the token has expired or is about to expire",
									"if (currentTime >= tokenExpiration - 60) {",
									"    console.log(\"Access token is expired or about to expire for admin, refreshing the token...\");",
									"",
									"    // Attempt to refresh the token",
									"    pm.sendRequest({",
									"        url: tokenEndpoint,",
									"        method: \"POST\",",
									"        header: {",
									"            \"Content-Type\": \"application/x-www-form-urlencoded\"",
									"        },",
									"        body: {",
									"            mode: \"urlencoded\",",
									"            urlencoded: [",
									"                { key: \"client_id\", value: clientid },",
									"                { key: \"grant_type\", value: \"refresh_token\" },",
									"                { key: \"refresh_token\", value: pm.environment.get(\"admin_refresh_token\") }",
									"            ]",
									"        }",
									"    }, function (err, res) {",
									"        if (err) {",
									"            console.log(\"Token refresh failed for admin:\", err);",
									"        } else {",
									"            try {",
									"                let jsonData = res.json();",
									"",
									"                // Check if there is an invalid grant error",
									"                if (jsonData.error === \"invalid_grant\" || jsonData.error === \"invalid_client\") {",
									"            console.log(\"Invalid grant or client. Please re-authenticate to get a new access token and refresh token.\");",
									"               ",
									"                    // Handle the invalid grant error by re-authenticating",
									"                    pm.sendRequest({",
									"                        url: tokenEndpoint,",
									"                        method: \"POST\",",
									"                        header: {",
									"                            \"Content-Type\": \"application/x-www-form-urlencoded\"",
									"                        },",
									"                        body: {",
									"                            mode: \"urlencoded\",",
									"                            urlencoded: [",
									"                                { key: \"client_id\", value: clientid },",
									"                                { key: \"grant_type\", value: \"password\" },",
									"                                { key: \"username\", value: pm.environment.get(\"admin_username\") }, // Store securely in environment",
									"                                { key: \"password\", value: pm.environment.get(\"admin_password\") }, // Store securely in environment",
									"                                { key: \"scope\", value: \"openid\" }",
									"                            ]",
									"                        }",
									"                    }, function (authErr, authRes) {",
									"                        if (authErr) {",
									"                            console.log(\"Re-authentication failed for admin:\", authErr);",
									"                        } else {",
									"                            let authData = authRes.json();",
									"",
									"                            // Update the access token, refresh token, and expiration time",
									"                            pm.environment.set(\"admin_access_token\", authData.access_token);",
									"                            pm.environment.set(\"admin_refresh_token\", authData.refresh_token);",
									"",
									"                            // Calculate and store the new token expiration time",
									"                            let newExpirationTime = Math.floor(Date.now() / 1000) + authData.expires_in;",
									"                            pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
									"",
									"                            console.log(\"Re-authentication successful, new token acquired for admin.\");",
									"                        }",
									"                    });",
									"                } else {",
									"                    // Update the access token, refresh token, and expiration time",
									"                    pm.environment.set(\"admin_access_token\", jsonData.access_token);",
									"                    pm.environment.set(\"admin_refresh_token\", jsonData.refresh_token);",
									"",
									"                    // Calculate and store the new token expiration time",
									"                    let newExpirationTime = Math.floor(Date.now() / 1000) + jsonData.expires_in;",
									"                    pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
									"",
									"                    console.log(\"Admin Token refreshed successfully.\");",
									"                }",
									"            } catch (e) {",
									"                console.log(\"Error parsing response for admin:\", e);",
									"            }",
									"        }",
									"    });",
									"} else {",
									"    console.log(\"Access token is still valid for admin, no need to refresh.\");",
									"}",
									"",
									"//keycloak",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Fetch Pending users RBA check",
					"item": [
						{
							"name": "Fetch all users pending for approval RBA check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the status code is 200",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string 'Insufficient permissions'\", function () {",
											"    // Use the retrieved environment variable in the test",
											"    pm.expect(pm.response.text()).to.include(\"Insufficient permissions\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/pending",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"pending"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Approve Users RBA check",
					"item": [
						{
							"name": "Approve Created User RBA check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the status code is 200",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string 'Insufficient permissions'\", function () {",
											"    // Use the retrieved environment variable in the test",
											"    pm.expect(pm.response.text()).to.include(\"Insufficient permissions\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users",
										"{{AdminUserId}}",
										"approve"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Delete User and Organization created for approval RBC",
					"item": [
						{
							"name": "Delete User After Approval in user flow rbc",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"users",
										"{{AdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Org after Approval in user flow for rbc",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"organizations",
										"{{TenantId}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Store the base URL from the environment variable",
									"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
									"let clientid = pm.environment.get(\"client_id\");",
									"",
									"// Set the base URL, realm, client ID, and client secret",
									" // Replace {keycloak_url} with your Keycloak URL",
									"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
									"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
									"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
									"",
									"// Set the token endpoint",
									"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
									"",
									"// Make the request to get the access token using client credentials",
									"pm.sendRequest({",
									"    url: tokenEndpoint,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded: [",
									"            { key: 'client_id', value: keycloakclientId },",
									"            { key: 'client_secret', value: keycloakclientSecret },",
									"            { key: 'grant_type', value: 'client_credentials' }",
									"        ]",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Failed to get access token:', err);",
									"    } else {",
									"        let jsonData = res.json();",
									"        ",
									"        if (jsonData.access_token) {",
									"            // Store the access token in an environment variable",
									"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
									"            console.log('Access token:', jsonData.access_token);",
									"        } else {",
									"            console.log('Error retrieving access token:', jsonData);",
									"        }",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Fetch All Users RBA check",
					"item": [
						{
							"name": "Fetch all users RBA check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the status code is 200",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"",
											"pm.test(\"Body matches string 'Insufficient permissions'\", function () {",
											"    // Use the retrieved environment variable in the test",
											"    pm.expect(pm.response.text()).to.include(\"Insufficient permissions\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/users",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Reject users RBA check",
					"item": [
						{
							"name": "Create User for rejecting RBA check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the status code is 201",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"// Check that the body includes the string \"pending\"",
											"pm.test(\"Body matches string 'pending'\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"pending\");",
											"});",
											"",
											"// Parse the response JSON",
											"var jsonData = pm.response.json();",
											"",
											"// Extract the id and email from the response",
											"var responsetenantId = jsonData.tenant.id;",
											"var responseadminuserid = jsonData.adminUser.id;",
											"var responseadminusername = jsonData.adminUser.username;",
											"var responseadminemail = jsonData.adminUser.email;",
											"var responseadminfirstname = jsonData.adminUser.firstName;",
											"var responseadminlastname = jsonData.adminUser.lastName;",
											"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
											"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
											"",
											"// Set the id and email as environment variables",
											"pm.environment.set(\"TenantId\", responsetenantId);",
											"pm.environment.set(\"AdminUserId\", responseadminuserid);",
											"pm.environment.set(\"Existingusername\", responseadminusername);",
											"pm.environment.set(\"Existingemail\", responseadminemail);",
											"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
											"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
											"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
											"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of specified length",
											"function generateRandomString(length) {",
											"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    let result = '';",
											"    for (let i = 0; i < length; i++) {",
											"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
											"    }",
											"    return result;",
											"}",
											"",
											"// Function to remove commas and spaces from a string",
											"function sanitizeString(str) {",
											"    return str.replace(/[\\s,]/g, ''); // Remove spaces and commas",
											"}",
											"",
											"// Generate custom organization name and ensure it’s <= 55 characters",
											"let customOrgName = generateRandomString(3) + ",
											"                    pm.variables.replaceIn('{{$randomCompanyName}}').substring(0, 10) + // Restrict to 10 characters",
											"                    generateRandomString(8) + ",
											"                    pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                    generateRandomString(3);",
											"",
											"// Sanitize the customOrgName to remove commas and spaces",
											"customOrgName = sanitizeString(customOrgName);",
											"",
											"if (customOrgName.length > 55) {",
											"    customOrgName = customOrgName.substring(0, 55);",
											"}",
											"",
											"pm.environment.set(\"customOrgName\", customOrgName);// Store customOrgName in environment variable",
											"",
											"// Generate custom email with \"com\" included, ensuring it’s <= 75 characters",
											"let customEmail = generateRandomString(3) + ",
											"                  pm.variables.replaceIn('{{$randomFirstName}}').substring(0, 10) + // Restrict to 10 characters",
											"                  generateRandomString(5) + ",
											"                  pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                  generateRandomString(5) + ",
											"                  'com';",
											"",
											"// Calculate remaining length to ensure total length is 75 characters",
											"const remainingLength = 75 - customEmail.length;",
											"",
											"// Append a part of {{$randomEmail}} to reach the exact length",
											"if (remainingLength > 0) {",
											"    customEmail += pm.variables.replaceIn('{{$randomEmail}}').substring(0, remainingLength);",
											"}",
											"",
											"// Generate custom username and ensure it’s not too long",
											"const customUsername = generateRandomString(5) + ",
											"                       pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
											"                       generateRandomString(5) + ",
											"                       pm.variables.replaceIn('{{$randomFirstName}}').substring(0, 10) + // Restrict to 10 characters",
											"                       generateRandomString(3);",
											"",
											"if (customUsername.length > 75) { // You can adjust this limit based on your requirements",
											"    customUsername = customUsername.substring(0, 75);",
											"}",
											"",
											"// Set the generated values into Postman environment variables",
											"pm.environment.set(\"customOrgName\", customOrgName);",
											"pm.environment.set(\"customUsername\", customUsername);",
											"pm.environment.set(\"customEmail\", customEmail);",
											"",
											"// Log the generated values to the console",
											"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
											"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
											"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{App_url}}/api/auth/signup",
									"host": [
										"{{App_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						}
					],
					"description": "Save Users",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Delete User and Organization after Rejection",
					"item": [
						{
							"name": "Delete User After Rejection in user flow",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"users",
										"{{AdminUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Org after Rejection in user flow",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{keycloak_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
									"host": [
										"{{keycloak_url}}"
									],
									"path": [
										"admin",
										"realms",
										"{{realm}}",
										"organizations",
										"{{TenantId}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Store the base URL from the environment variable",
									"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
									"let clientid = pm.environment.get(\"client_id\");",
									"",
									"// Set the base URL, realm, client ID, and client secret",
									" // Replace {keycloak_url} with your Keycloak URL",
									"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
									"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
									"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
									"",
									"// Set the token endpoint",
									"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
									"",
									"// Make the request to get the access token using client credentials",
									"pm.sendRequest({",
									"    url: tokenEndpoint,",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/x-www-form-urlencoded'",
									"    },",
									"    body: {",
									"        mode: 'urlencoded',",
									"        urlencoded: [",
									"            { key: 'client_id', value: keycloakclientId },",
									"            { key: 'client_secret', value: keycloakclientSecret },",
									"            { key: 'grant_type', value: 'client_credentials' }",
									"        ]",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log('Failed to get access token:', err);",
									"    } else {",
									"        let jsonData = res.json();",
									"        ",
									"        if (jsonData.access_token) {",
									"            // Store the access token in an environment variable",
									"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
									"            console.log('Access token:', jsonData.access_token);",
									"        } else {",
									"            console.log('Error retrieving access token:', jsonData);",
									"        }",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Agent Binary",
					"item": [
						{
							"name": "Upload File RBA check",
							"item": [
								{
									"name": "File upload with valid .zip extension",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"  pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Get the folder path from the environment variable",
													"const folderPath = pm.environment.get('fileuploadPath');",
													" ",
													"// Set the file name directly",
													"const fileName = \"4mb.zip\";",
													" ",
													"// Use backticks for template literals to combine folder path and file name",
													"const filePath = `${folderPath}/${fileName}`;",
													"console.log(\"File path:\", filePath);",
													" ",
													"// Set the request body to include the file",
													"pm.request.body = {",
													"    mode: 'formdata',",
													"    formdata: [",
													"        {",
													"            key: 'file',",
													"            type: 'file',",
													"            src: filePath,  // Use the combined file path",
													"        },",
													"    ],",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"description": "(Required)",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Fetch Agentbinaries",
							"item": [
								{
									"name": "Fetch All Agentbinaries",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												""
											]
										},
										"description": "List all available agent binary versions and their files."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/",
													"host": [
														"{{agentBinaryUrl}}"
													],
													"path": [
														"agentbinary",
														"v1.0",
														""
													]
												},
												"description": "List all available agent binary versions and their files."
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Download File",
							"item": [
								{
									"name": "Downloading a .tar file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{tarfile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{tarfile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								},
								{
									"name": "Downloading a .exe file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/download/{{exefile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"download",
												"{{exefile}}"
											]
										},
										"description": "Download the specified agent binary file."
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete File RBA check",
							"item": [
								{
									"name": "Deleting exe file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"  pm.response.to.have.status(403);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{agentBinaryUrl}}/agentbinary/v1.0/{{exefile}}",
											"host": [
												"{{agentBinaryUrl}}"
											],
											"path": [
												"agentbinary",
												"v1.0",
												"{{exefile}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Console",
					"item": [
						{
							"name": "Create and Approve User",
							"item": [
								{
									"name": "Create User with valid data in console flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Check that the status code is 201",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"// Check that the body includes the string \"pending\"",
													"pm.test(\"Body matches string 'pending'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"pending\");",
													"});",
													"",
													"// Parse the response JSON",
													"var jsonData = pm.response.json();",
													"",
													"// Extract the id and email from the response",
													"var responsetenantId = jsonData.tenant.id;",
													"var responseadminuserid = jsonData.adminUser.id;",
													"var responseadminusername = jsonData.adminUser.username;",
													"var responseadminemail = jsonData.adminUser.email;",
													"var responseadminfirstname = jsonData.adminUser.firstName;",
													"var responseadminlastname = jsonData.adminUser.lastName;",
													"var responseadminattributesstatus = jsonData.adminUser.attributes.status;",
													"var responseadminverificationtoken = jsonData.adminUser.attributes.verificationToken;",
													"",
													"// Set the id and email as environment variables",
													"pm.environment.set(\"TenantId\", responsetenantId);",
													"pm.environment.set(\"AdminUserId\", responseadminuserid);",
													"pm.environment.set(\"user_username\", responseadminusername);",
													"pm.environment.set(\"Existingusername\", responseadminusername);",
													"pm.environment.set(\"Existingemail\", responseadminemail);",
													"pm.environment.set(\"ExistingfirstName\", responseadminfirstname);",
													"pm.environment.set(\"ExistinglastName\", responseadminlastname);",
													"pm.environment.set(\"AttributesStatus\", responseadminattributesstatus);",
													"pm.environment.set(\"Existingverificationcode\", responseadminverificationtoken);",
													"",
													"pm.environment.set(\"user_refresh_token\", \"test\");",
													"pm.environment.set(\"user_token_expiration\",0);",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Function to generate a random string of specified length",
													"function generateRandomString(length) {",
													"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"// Function to remove commas and spaces from a string",
													"function sanitizeString(str) {",
													"    return str.replace(/[\\s,]/g, ''); // Remove spaces and commas",
													"}",
													"",
													"// Generate custom organization name and ensure it’s <= 55 characters",
													"let customOrgName = generateRandomString(3) + ",
													"                    pm.variables.replaceIn('{{$randomCompanyName}}').substring(0, 10) + // Restrict to 10 characters",
													"                    generateRandomString(8) + ",
													"                    pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
													"                    generateRandomString(3);",
													"",
													"// Sanitize the customOrgName to remove commas and spaces",
													"customOrgName = sanitizeString(customOrgName);",
													"",
													"if (customOrgName.length > 55) {",
													"    customOrgName = customOrgName.substring(0, 55);",
													"}",
													"",
													"pm.environment.set(\"customOrgName\", customOrgName);// Store customOrgName in environment variable",
													"",
													"// Generate custom email with \"com\" included, ensuring it’s <= 75 characters",
													"let customEmail = generateRandomString(3) + ",
													"                  pm.variables.replaceIn('{{$randomFirstName}}').substring(0, 10) + // Restrict to 10 characters",
													"                  generateRandomString(5) + ",
													"                  pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
													"                  generateRandomString(5) + ",
													"                  'com';",
													"",
													"// Calculate remaining length to ensure total length is 75 characters",
													"const remainingLength = 75 - customEmail.length;",
													"",
													"// Append a part of {{$randomEmail}} to reach the exact length",
													"if (remainingLength > 0) {",
													"    customEmail += pm.variables.replaceIn('{{$randomEmail}}').substring(0, remainingLength);",
													"}",
													"",
													"// Generate custom username and ensure it’s not too long",
													"const customUsername = generateRandomString(5) + ",
													"                       pm.variables.replaceIn('{{$guid}}').substring(0, 20) + // Restrict to 20 characters",
													"                       generateRandomString(5) + ",
													"                       pm.variables.replaceIn('{{$randomFirstName}}').substring(0, 10) + // Restrict to 10 characters",
													"                       generateRandomString(3);",
													"",
													"if (customUsername.length > 75) { // You can adjust this limit based on your requirements",
													"    customUsername = customUsername.substring(0, 75);",
													"}",
													"",
													"// Set the generated values into Postman environment variables",
													"pm.environment.set(\"customOrgName\", customOrgName);",
													"pm.environment.set(\"customUsername\", customUsername);",
													"pm.environment.set(\"customEmail\", customEmail);",
													"",
													"// Log the generated values to the console",
													"console.log(\"Custom Org Name (<= 55 chars, no commas or spaces):\", customOrgName);",
													"console.log(\"Custom Username (<= 75 chars):\", customUsername);",
													"console.log(\"Custom Email (<= 75 chars, includes 'com'):\", customEmail);",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"orgName\": \"{{customOrgName}}\",\n    \"adminUser\": {\n        \"username\": \"{{customUsername}}\",\n        \"email\": \"{{customEmail}}\",\n        \"firstName\": \"{{$randomFirstName}}\",\n        \"lastName\": \"{{$randomLastName}}\",\n        \"password\": \"{{password}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{App_url}}/api/auth/signup",
											"host": [
												"{{App_url}}"
											],
											"path": [
												"api",
												"auth",
												"signup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve Created User in console flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Check that the body includes the string \"pending\"",
													"pm.test(\"Body matches string 'User approved successfully'\", function () {",
													"  pm.expect(pm.response.text()).to.include(\"User approved successfully\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{App_url}}/api/users/{{AdminUserId}}/approve",
											"host": [
												"{{App_url}}"
											],
											"path": [
												"api",
												"users",
												"{{AdminUserId}}",
												"approve"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{admin_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"// Store the base URL from the environment variable",
											"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
											"let clientid = pm.environment.get(\"client_id\");",
											"",
											"// Set the base URL, realm, client ID, and client secret",
											" // Replace {keycloak_url} with your Keycloak URL",
											"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
											"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
											"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
											"",
											"// Set the token endpoint",
											"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
											"",
											"// Get the current time and the token expiration time from environment variables",
											"let currentTime = Math.floor(Date.now() / 1000);",
											"let tokenExpiration = pm.environment.get(\"admin_token_expiration\");",
											"",
											"// Check if the token has expired or is about to expire",
											"if (currentTime >= tokenExpiration - 60) {",
											"    console.log(\"Access token is expired or about to expire for admin, refreshing the token...\");",
											"",
											"    // Attempt to refresh the token",
											"    pm.sendRequest({",
											"        url: tokenEndpoint,",
											"        method: \"POST\",",
											"        header: {",
											"            \"Content-Type\": \"application/x-www-form-urlencoded\"",
											"        },",
											"        body: {",
											"            mode: \"urlencoded\",",
											"            urlencoded: [",
											"                { key: \"client_id\", value: clientid },",
											"                { key: \"grant_type\", value: \"refresh_token\" },",
											"                { key: \"refresh_token\", value: pm.environment.get(\"admin_refresh_token\") }",
											"            ]",
											"        }",
											"    }, function (err, res) {",
											"        if (err) {",
											"            console.log(\"Token refresh failed for admin:\", err);",
											"        } else {",
											"            try {",
											"                let jsonData = res.json();",
											"",
											"                // Check if there is an invalid grant error",
											"                if (jsonData.error === \"invalid_grant\" || jsonData.error === \"invalid_client\") {",
											"            console.log(\"Invalid grant or client. Please re-authenticate to get a new access token and refresh token.\");",
											"               ",
											"                    // Handle the invalid grant error by re-authenticating",
											"                    pm.sendRequest({",
											"                        url: tokenEndpoint,",
											"                        method: \"POST\",",
											"                        header: {",
											"                            \"Content-Type\": \"application/x-www-form-urlencoded\"",
											"                        },",
											"                        body: {",
											"                            mode: \"urlencoded\",",
											"                            urlencoded: [",
											"                                { key: \"client_id\", value: clientid },",
											"                                { key: \"grant_type\", value: \"password\" },",
											"                                { key: \"username\", value: pm.environment.get(\"admin_username\") }, // Store securely in environment",
											"                                { key: \"password\", value: pm.environment.get(\"admin_password\") }, // Store securely in environment",
											"                                { key: \"scope\", value: \"openid\" }",
											"                            ]",
											"                        }",
											"                    }, function (authErr, authRes) {",
											"                        if (authErr) {",
											"                            console.log(\"Re-authentication failed for admin:\", authErr);",
											"                        } else {",
											"                            let authData = authRes.json();",
											"",
											"                            // Update the access token, refresh token, and expiration time",
											"                            pm.environment.set(\"admin_access_token\", authData.access_token);",
											"                            pm.environment.set(\"admin_refresh_token\", authData.refresh_token);",
											"",
											"                            // Calculate and store the new token expiration time",
											"                            let newExpirationTime = Math.floor(Date.now() / 1000) + authData.expires_in;",
											"                            pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
											"",
											"                            console.log(\"Re-authentication successful, new token acquired for admin.\");",
											"                        }",
											"                    });",
											"                } else {",
											"                    // Update the access token, refresh token, and expiration time",
											"                    pm.environment.set(\"admin_access_token\", jsonData.access_token);",
											"                    pm.environment.set(\"admin_refresh_token\", jsonData.refresh_token);",
											"",
											"                    // Calculate and store the new token expiration time",
											"                    let newExpirationTime = Math.floor(Date.now() / 1000) + jsonData.expires_in;",
											"                    pm.environment.set(\"admin_token_expiration\", newExpirationTime);",
											"",
											"                    console.log(\"Admin Token refreshed successfully.\");",
											"                }",
											"            } catch (e) {",
											"                console.log(\"Error parsing response for admin:\", e);",
											"            }",
											"        }",
											"    });",
											"} else {",
											"    console.log(\"Access token is still valid for admin, no need to refresh.\");",
											"}",
											"",
											"//keycloak",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Add Device",
							"item": [
								{
									"name": "Create Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Define jsonData before using it in the test script",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceSerialNumber = pm.environment.get(\"deviceSerialNumber\");",
													"",
													"// Extract the id and email from the response",
													"var responseDeviceId = jsonData.id;",
													"",
													"// Set the id and email as environment variables",
													"pm.environment.set(\"deviceID\", responseDeviceId);",
													"",
													"",
													"pm.test(\"Verify 'serial_number' is deviceSerialNumber\", function () {",
													"    pm.expect(jsonData).to.have.property(\"serial_number\"); // Check if 'last_seen' exists",
													"    pm.expect(jsonData.serial_number.toString()).to.equal(deviceSerialNumber.toString()); // Verify 'last_seen' is null",
													"});",
													"",
													"",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(jsonData.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random number between 1 and 999999999",
													"const serialNumber = Math.floor(1 + Math.random() * 999999999);",
													"",
													"// Log the serial number for debugging",
													"console.log(\"Generated Serial Number: \" + serialNumber);",
													"",
													"// Set the serial number as an environment variable",
													"pm.environment.set(\"deviceSerialNumber\", serialNumber);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{deviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"serial_number\": \"{{deviceSerialNumber}}\",\n  \"properties\": {\n\t\"IP\" :\"{{deviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Fetch Device before heartbeat",
							"item": [
								{
									"name": "Fetch all the devices in the Org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"// Parse the response as JSON",
													"const responseJson = pm.response.json();",
													"",
													"// Access the first device object from the 'devices' array",
													"const firstDevice = responseJson.devices[0];",
													"",
													"// Verify 'id' matches the stored 'deviceID'",
													"pm.test(\"Verify 'id' matches deviceID\", function () {",
													"    pm.expect(firstDevice).to.have.property(\"id\"); // Check if 'id' exists",
													"    pm.expect(firstDevice.id).to.equal(deviceID);  // Verify 'id' matches deviceID",
													"});",
													"",
													"// Verify 'last_seen' is null",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    pm.expect(firstDevice).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(firstDevice.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/?skip=0&limit=100",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch a device in a Org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.property(\"id\"); // Check if 'last_seen' exists",
													"    pm.expect(responseJson.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(responseJson.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Update Device",
							"item": [
								{
									"name": "Updating Device IP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceSerialNumber = pm.environment.get(\"deviceSerialNumber\");",
													"",
													"",
													"pm.test(\"Verify 'serial_number' is deviceSerialNumber\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.property(\"serial_number\"); // Check if 'last_seen' exists",
													"    pm.expect(responseJson.serial_number.toString()).to.equal(deviceSerialNumber.toString()); // Verify 'last_seen' is null",
													"});",
													"",
													"",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(responseJson.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{deviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"serial_number\": \"{{deviceSerialNumber}}\",\n  \"properties\": {\n\t\"IP\" :\"{{updatedDeviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch a device in a Org after device update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"const updatedDeviceIP = pm.environment.get(\"updatedDeviceIP\");",
													"",
													"",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.property(\"id\"); // Check if 'last_seen' exists",
													"    pm.expect(responseJson.id.toString()).to.equal(deviceID.toString()); // Verify 'last_seen' is null",
													"});",
													"",
													"pm.test(\"Verify IP is 'updatedDeviceIP'\", function () {",
													"    const responseJson = pm.response.json(); // Parse response as JSON",
													"    pm.expect(responseJson).to.have.nested.property(\"properties.IP\", updatedDeviceIP); // Check IP value",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Second Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Define jsonData before using it in the test script",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const secondDeviceSerialNumber = pm.environment.get(\"secondDeviceSerialNumber\");",
													"",
													"// Extract the id and email from the response",
													"var responseDeviceId = jsonData.id;",
													"",
													"",
													"pm.test(\"Verify 'serial_number' is secondDeviceSerialNumber\", function () {",
													"    pm.expect(jsonData).to.have.property(\"serial_number\"); // Check if 'last_seen' exists",
													"    pm.expect(jsonData.serial_number.toString()).to.equal(secondDeviceSerialNumber.toString()); // Verify 'last_seen' is null",
													"});",
													"",
													"",
													"pm.test(\"Verify 'last_seen' is null\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\"); // Check if 'last_seen' exists",
													"    pm.expect(jsonData.last_seen).to.be.null; // Verify 'last_seen' is null",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random number between 1 and 999999999",
													"const serialNumber = Math.floor(1 + Math.random() * 999999999);",
													"",
													"// Log the serial number for debugging",
													"console.log(\"Generated Serial Number: \" + serialNumber);",
													"",
													"// Set the serial number as an environment variable",
													"pm.environment.set(\"secondDeviceSerialNumber\", serialNumber);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{secondDeviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"serial_number\": \"{{secondDeviceSerialNumber}}\",\n  \"properties\": {\n\t\"IP\" :\"{{deviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Updating Device with existing device serial number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400); // Ensure the status code is 400 (bad request)",
													"});",
													"",
													"// Retrieve the serial number from the environment",
													"const serialNumber = pm.environment.get(\"secondDeviceSerialNumber\");",
													"",
													"// Parse the response as JSON",
													"const responseJson = pm.response.json();",
													"",
													"// Verify the error details",
													"pm.test(\"Verify 'UniqueViolation' and 'serial_number' match\", function () {",
													"    pm.expect(responseJson.error).to.have.property(\"details\"); // Check if 'details' exists",
													"    pm.expect(responseJson.error.details.error).to.have.property(\"error_type\", \"UniqueViolation\"); // Verify the error type is 'UniqueViolation'",
													"    pm.expect(responseJson.error.details).to.have.property(\"id\"); // Check if 'id' exists",
													"    pm.expect(responseJson.error.details.error).to.have.property(\"detail\"); // Check if 'detail' exists",
													"    ",
													"    // Verify the serial number exists in the 'detail' message",
													"    pm.expect(responseJson.error.details.error.detail).to.include(`Key (serial_number)=(${serialNumber}) already exists.`);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{deviceName}}\",\n  \"type\": \"{{deviceType}}\",\n  \"serial_number\": \"{{secondDeviceSerialNumber}}\",\n  \"properties\": {\n\t\"IP\" :\"{{updatedDeviceIP}}\",\n\t\"LOCATION\":\"{{deviceLocation}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Update Device Heartbeat",
							"item": [
								{
									"name": "Update Heartbeat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Define jsonData before using it in the test script",
													"const jsonData = pm.response.json();",
													"",
													"// Verify status code is 200",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Fetch and log 'created_at' field",
													"pm.test(\"Fetch 'last_seen' field\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\"); // Check if 'created_at' exists",
													"    console.log(\"last_seen:\", jsonData.last_seen); // Log 'created_at' value",
													"});",
													"",
													"pm.environment.set(\"last_seen\", jsonData.last_seen);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}/heartbeat",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}",
												"heartbeat"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Fetch Device After heartbeat",
							"item": [
								{
									"name": "Fetch a device to check status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Define jsonData before using it in the test script",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"const lastseenAtEnv = pm.environment.get(\"last_seen\"); // Fetch 'created_at' from environment variable",
													"",
													"// Verify 'id' matches deviceID from environment variable",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"// Verify 'created_at' matches the value from the environment variable",
													"pm.test(\"Verify 'last_seen' is correct\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\");",
													"    pm.expect(jsonData.last_seen).to.equal(lastseenAtEnv);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Fetch Device and check status after 1 min where heartbeat call is not done",
							"item": [
								{
									"name": "Fetch a device to check status after 1 min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Define jsonData before using it in the test script",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"const lastseenAtEnv = pm.environment.get(\"last_seen\"); // Fetch 'created_at' from environment variable",
													"",
													"// Verify 'id' matches deviceID from environment variable",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"// Verify 'created_at' matches the value from the environment variable",
													"pm.test(\"Verify 'last_seen' is correct\", function () {",
													"    pm.expect(jsonData).to.have.property(\"last_seen\");",
													"    pm.expect(jsonData.last_seen).to.equal(lastseenAtEnv);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log(\"Adding a delay of 60 seconds before sending the request...\");",
													"",
													"// Delay of 60 seconds (60000 milliseconds)",
													"setTimeout(function() {",
													"    console.log(\"Delay finished. Proceeding to send the request.\");",
													"    // Any code you want to execute after the delay can go here",
													"}, 60000);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{user_access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "EndPoint-Config",
					"item": [
						{
							"name": "Fetch and update end-point config details",
							"item": [
								{
									"name": "Fetch end-point config details for a device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse response body as JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Status Code Test",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"// Verify the 'id' matches 'deviceID'",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"// Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', 'Whitelist' are present",
													"pm.test(\"Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays are present\", function () {",
													"    pm.expect(jsonData.config).to.have.property(\"Analysis\");",
													"    pm.expect(jsonData.config).to.have.property(\"Decryptor\");",
													"    pm.expect(jsonData.config).to.have.property(\"Bands\");",
													"    pm.expect(jsonData.config).to.have.property(\"MonitorStatistics\");",
													"    pm.expect(jsonData.config).to.have.property(\"Whitelist\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/endpoint-config/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"endpoint-config",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update end-point config details for a device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse response body as JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Status Code Test",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"// Verify the 'id' matches 'deviceID'",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"// Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', 'Whitelist' are present",
													"pm.test(\"Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays are present\", function () {",
													"    pm.expect(jsonData.config).to.have.property(\"Analysis\");",
													"    pm.expect(jsonData.config).to.have.property(\"Decryptor\");",
													"    pm.expect(jsonData.config).to.have.property(\"Bands\");",
													"    pm.expect(jsonData.config).to.have.property(\"MonitorStatistics\");",
													"    pm.expect(jsonData.config).to.have.property(\"Whitelist\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"HP dash LP Config\",\n    \"type\": \"Laptop\",\n    \"config\": {\n        \"MemcryptLog\": {\n            \"post_ip\": \"localhost\",\n            \"port\": \"{{memcryptLog_port}}\",\n            \"local_log_location\": \"C:\\\\Windows\\\\Detect\\\\TempDEBUG=false\"\n        },\n        \"Analysis\": {\n            \"dir_to_analyse\": \"\",\n            \"key\": \"\",\n            \"nonce\": \"\",\n            \"ipaddress\": \"localhost\",\n            \"port\": \"8899\",\n            \"infected_file\": \"\",\n            \"dir_candidate_values\": \"\",\n            \"recovery_file\": \"C:\\\\Windows\\\\Detect\\\\Tempremote=true\",\n            \"parallel\": \"false\",\n            \"bulk\": \"false\"\n        },\n        \"Decryptor\": {\n            \"dir_candidate_values\": \"\",\n            \"infected_file\": \"\",\n            \"dir_candidates_folder\": \"\",\n            \"dir_ransomware_folder\": \"\",\n            \"dir_extracts_folder\": \"\",\n            \"decrypts_folder\": \"\",\n            \"recovery_file\": \"C:\\\\Windows\\\\Detect\\\\Tempsafeext_filename=C:\\\\Windows\\\\Detect\\\\SafeExt.csv\",\n            \"extensionvalidationfile\": \"C:\\\\Windows\\\\Detect\\fileidentifier.json\",\n            \"ransomwareparameterfile\": \"C:\\\\Windows\\\\Detect\\ransomware.json\",\n            \"time_limit\": \"1800\",\n            \"remote\": \"true\",\n            \"parallel\": \"auto\",\n            \"algorithms\": \"CHACHA20#256#NA,CHACHA8#256#NA,SALSA20#256#NA,AES#256#CBC,AES#256#CTR,AES#256#CFB\",\n            \"bulk\": \"false\"\n        },\n        \"Bands\": {\n            \"cpured\": \"90\",\n            \"cpuamber\": \"70\",\n            \"memred\": \"90\",\n            \"memamber\": \"70\",\n            \"diskred\": \"90\",\n            \"diskamber\": \"70\",\n            \"ioreadsred\": \"100\",\n            \"ioreadsamber\": \"20\",\n            \"iowritesred\": \"100\",\n            \"iowritesamber\": \"20\",\n            \"updatedeltared\": \"30\",\n            \"updatedeltaamber\": \"10\"\n        },\n        \"MonitorStatistics\": {\n            \"ipaddress\": \"localhost\",\n            \"port\": \"8888\",\n            \"refreshinterval\": \"10\"\n        },\n        \"Whitelist\": {\n            \"inspect_folder\": \"c:whitelist_path=C:\\\\Windows\\\\Detect\\\\hashwhitelist.csv\",\n            \"hashes_number\": \"\",\n            \"hash_size\": \"\",\n            \"buffer_size\": \"\",\n            \"remote\": \"true\",\n            \"append\": \"true\",\n            \"centralised\": \"true\",\n            \"ipaddress\": \"localhost\",\n            \"port\": \"8888\"\n        },\n        \"Extractor\": {\n            \"logswitch\": \"silent\",\n            \"security_switch\": \"off\",\n            \"extract_folder\": \"C:\\\\Windows\\\\Detect\\\\Temp\",\n            \"hash_filename\": \"C:\\\\Windows\\\\Detect\\\\hashwhitelist.csv\",\n            \"folder_filename\": \"C:\\\\Windows\\\\Detect\\folderwhitelist.enc\",\n            \"suspectext_filename\": \"C:\\\\Windows\\\\Detect\\\\SuspectExt.enc\",\n            \"safeext_filename\": \"C:\\\\Windows\\\\Detect\\\\SafeExt.enc\",\n            \"suspectext_killswitch\": \"on\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/endpoint-config/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"endpoint-config",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify whether updated end-point config details are been fetched",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse response body as JSON",
													"const jsonData = pm.response.json();",
													"",
													"// Status Code Test",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"const memcryptlogPort = pm.environment.get(\"memcryptLog_port\"); // Retrieve memcryptLog_port from environment",
													"",
													"// Verify the 'id' matches 'deviceID'",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													"// Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', 'Whitelist' are present",
													"pm.test(\"Verify 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays are present\", function () {",
													"    pm.expect(jsonData.config).to.have.property(\"Analysis\");",
													"    pm.expect(jsonData.config).to.have.property(\"Decryptor\");",
													"    pm.expect(jsonData.config).to.have.property(\"Bands\");",
													"    pm.expect(jsonData.config).to.have.property(\"MonitorStatistics\");",
													"    pm.expect(jsonData.config).to.have.property(\"Whitelist\");",
													"});",
													"",
													"// Verify the port in MemcryptLog array",
													"pm.test(\"Verify 'port' in MemcryptLog matches environment variable\", function () {",
													"    pm.expect(jsonData.config).to.have.property(\"MemcryptLog\"); // Check if MemcryptLog exists",
													"    pm.expect(jsonData.config.MemcryptLog).to.have.property(\"port\"); // Check if 'port' exists within MemcryptLog",
													"    pm.expect(jsonData.config.MemcryptLog.port.toString()).to.equal(memcryptlogPort.toString()); // Compare the port with environment variable",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/endpoint-config/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"endpoint-config",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch end-point config details of all the devices in the org",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Parse response body as JSON",
													"let jsonData;",
													"try {",
													"    jsonData = pm.response.json();",
													"} catch (e) {",
													"    console.error(\"Failed to parse JSON:\", e);",
													"    pm.test(\"Response is valid JSON\", function () {",
													"        pm.expect.fail(\"Response body is not valid JSON\");",
													"    });",
													"    return;  // Exit if JSON is invalid",
													"}",
													"",
													"// Status Code Test",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"console.log(\"Device ID from environment:\", deviceID);",
													"",
													"// Verify the presence of 'id' and compare it with 'deviceID'",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    let found = false;",
													"    jsonData.forEach(function(item) {",
													"        if (item.id.toString() === deviceID.toString()) {",
													"            found = true;",
													"        }",
													"    });",
													"    pm.expect(found).to.be.true;  // Test passes if 'id' is found matching deviceID",
													"});",
													"",
													"// Verify the presence of 'Analysis', 'Decryptor', 'Bands', 'MonitorStatistics', and 'Whitelist' arrays in each config",
													"jsonData.forEach(function(item, index) {",
													"    pm.test(`Verify config sections in object #${index + 1}`, function () {",
													"        pm.expect(item).to.have.property('config');",
													"        const config = item.config;",
													"",
													"        // Check for presence of required properties in the config",
													"        pm.expect(config).to.have.property(\"Analysis\");",
													"        pm.expect(config).to.have.property(\"Decryptor\");",
													"        pm.expect(config).to.have.property(\"Bands\");",
													"        pm.expect(config).to.have.property(\"MonitorStatistics\");",
													"        pm.expect(config).to.have.property(\"Whitelist\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/endpoint-config/",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"endpoint-config",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Device",
							"item": [
								{
									"name": "Delete device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Define jsonData before using it in the test script",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"",
													"// Verify 'id' matches deviceID from environment variable",
													"pm.test(\"Verify 'id' is deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData.id.toString()).to.equal(deviceID.toString());",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch a device after delete it",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Define jsonData before using it in the test script",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													"",
													"// Retrieve environment variables",
													"const deviceID = pm.environment.get(\"deviceID\");",
													"",
													"// Verify 'id' in the response matches deviceID from environment variables",
													"pm.test(\"Verify 'id' in error details matches deviceID\", function () {",
													"    pm.expect(jsonData).to.have.property(\"error\"); // Ensure 'error' object exists",
													"    pm.expect(jsonData.error.details).to.have.property(\"id\"); // Ensure 'id' exists in error details",
													"    pm.expect(jsonData.error.details.id.toString()).to.equal(deviceID.toString()); // Verify 'id' matches",
													"});",
													"",
													"// Verify 'message' in the response",
													"pm.test(\"Verify 'message' in error\", function () {",
													"    pm.expect(jsonData).to.have.property(\"error\"); // Ensure 'error' object exists",
													"    pm.expect(jsonData.error).to.have.property(\"message\"); // Ensure 'message' exists",
													"    pm.expect(jsonData.error.message).to.contain(\"Object with id \" + deviceID + \" not found\"); // Verify 'message' contains correct information",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Org-Key",
												"value": "{{TenantId}}"
											}
										],
										"url": {
											"raw": "{{consoleUrl}}/console/v1.0/devices/{{deviceID}}",
											"host": [
												"{{consoleUrl}}"
											],
											"path": [
												"console",
												"v1.0",
												"devices",
												"{{deviceID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete User and Organization after console flow",
							"item": [
								{
									"name": "Delete User After console flow",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{keycloak_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{keycloak_url}}/admin/realms/{{realm}}/users/{{AdminUserId}}",
											"host": [
												"{{keycloak_url}}"
											],
											"path": [
												"admin",
												"realms",
												"{{realm}}",
												"users",
												"{{AdminUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Org after console flow",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{keycloak_access_token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{keycloak_url}}/admin/realms/{{realm}}/organizations/{{TenantId}}",
											"host": [
												"{{keycloak_url}}"
											],
											"path": [
												"admin",
												"realms",
												"{{realm}}",
												"organizations",
												"{{TenantId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"// Store the base URL from the environment variable",
											"let keycloakUrl = pm.environment.get(\"keycloak_url\");",
											"let clientid = pm.environment.get(\"client_id\");",
											"",
											"// Set the base URL, realm, client ID, and client secret",
											" // Replace {keycloak_url} with your Keycloak URL",
											"let realm = pm.environment.get(\"realm\");  // Replace {realm} with your realm",
											"let keycloakclientId = pm.environment.get(\"keycloak_clientId\");;",
											"let keycloakclientSecret = pm.environment.get(\"keycloak_secert\");;",
											"",
											"// Set the token endpoint",
											"let tokenEndpoint = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
											"",
											"// Make the request to get the access token using client credentials",
											"pm.sendRequest({",
											"    url: tokenEndpoint,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/x-www-form-urlencoded'",
											"    },",
											"    body: {",
											"        mode: 'urlencoded',",
											"        urlencoded: [",
											"            { key: 'client_id', value: keycloakclientId },",
											"            { key: 'client_secret', value: keycloakclientSecret },",
											"            { key: 'grant_type', value: 'client_credentials' }",
											"        ]",
											"    }",
											"}, function (err, res) {",
											"    if (err) {",
											"        console.log('Failed to get access token:', err);",
											"    } else {",
											"        let jsonData = res.json();",
											"        ",
											"        if (jsonData.access_token) {",
											"            // Store the access token in an environment variable",
											"            pm.environment.set('keycloak_access_token', jsonData.access_token);",
											"            console.log('Access token:', jsonData.access_token);",
											"        } else {",
											"            console.log('Error retrieving access token:', jsonData);",
											"        }",
											"    }",
											"});",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Store the base URL from the environment variable",
							"let keycloakurl = pm.environment.get(\"keycloak_url\");",
							"let clientid = pm.environment.get(\"client_id\");",
							"let realm = pm.environment.get(\"realm\");",
							"  // Replace {realm} with your realm",
							"",
							"let tokenEndpoint = `${keycloakurl}/realms/${realm}/protocol/openid-connect/token`;",
							"",
							"// Get the current time and the token expiration time from environment variables",
							"let currentTime = Math.floor(Date.now() / 1000);",
							"let tokenExpiration = pm.environment.get(\"user_token_expiration\");",
							"let userUserName = pm.environment.get(\"user_username\")",
							"let userPassword = pm.environment.get(\"user_password\")",
							"",
							"// Check if the token has expired or is about to expire",
							"if (currentTime >= tokenExpiration - 60) {",
							"    console.log(\"Access token is expired or about to expire for user, refreshing the token...\");",
							"",
							"    // Attempt to refresh the token",
							"    pm.sendRequest({",
							"        url: tokenEndpoint,",
							"        method: \"POST\",",
							"        header: {",
							"            \"Content-Type\": \"application/x-www-form-urlencoded\"",
							"        },",
							"        body: {",
							"            mode: \"urlencoded\",",
							"            urlencoded: [",
							"                { key: \"client_id\", value: clientid },",
							"                { key: \"grant_type\", value: \"refresh_token\" },",
							"                { key: \"refresh_token\", value: pm.environment.get(\"user_refresh_token\") }",
							"            ]",
							"        }",
							"    }, function (err, res) {",
							"        if (err) {",
							"            console.log(\"Token refresh failed for user:\", err);",
							"        } else {",
							"            try {",
							"                let jsonData = res.json();",
							"",
							"                // Check if there is an invalid grant error",
							"                if (jsonData.error === \"invalid_grant\" || jsonData.error === \"invalid_client\") {",
							"            console.log(\"Invalid grant or client. Please re-authenticate to get a new access token and refresh token.\");",
							"               ",
							"                    // Handle the invalid grant error by re-authenticating",
							"                    pm.sendRequest({",
							"                        url: tokenEndpoint,",
							"                        method: \"POST\",",
							"                        header: {",
							"                            \"Content-Type\": \"application/x-www-form-urlencoded\"",
							"                        },",
							"                        body: {",
							"                            mode: \"urlencoded\",",
							"                            urlencoded: [",
							"                                { key: \"client_id\", value: clientid },",
							"                                { key: \"grant_type\", value: \"password\" },",
							"                                { key: \"username\", value: userUserName }, // Store securely in environment",
							"                                { key: \"password\", value: userPassword }, // Store securely in environment",
							"                                { key: \"scope\", value: \"openid\" }",
							"                            ]",
							"                        }",
							"                    }, function (authErr, authRes) {",
							"                        if (authErr) {",
							"                            console.log(\"Re-authentication failed for user:\", authErr);",
							"                        } else {",
							"                            let authData = authRes.json();",
							"",
							"                            // Update the access token, refresh token, and expiration time",
							"                            pm.environment.set(\"user_access_token\", authData.access_token);",
							"                            pm.environment.set(\"user_refresh_token\", authData.refresh_token);",
							"",
							"                            // Calculate and store the new token expiration time",
							"                            let newExpirationTime = Math.floor(Date.now() / 1000) + authData.expires_in;",
							"                            pm.environment.set(\"user_token_expiration\", newExpirationTime);",
							"",
							"                            console.log(\"Re-authentication successful, new token acquired for user.\");",
							"                        }",
							"                    });",
							"                } else {",
							"                    // Update the access token, refresh token, and expiration time",
							"                    pm.environment.set(\"user_access_token\", jsonData.access_token);",
							"                    pm.environment.set(\"user_refresh_token\", jsonData.refresh_token);",
							"",
							"                    // Calculate and store the new token expiration time",
							"                    let newExpirationTime = Math.floor(Date.now() / 1000) + jsonData.expires_in;",
							"                    pm.environment.set(\"user_token_expiration\", newExpirationTime);",
							"",
							"                    console.log(\"User Token refreshed successfully.\");",
							"                }",
							"            } catch (e) {",
							"                console.log(\"Error parsing response for user:\", e);",
							"            }",
							"        }",
							"    });",
							"} else {",
							"    console.log(\"Access token is still valid for user, no need to refresh.\");",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}